{"ast":null,"code":"var _jsxFileName = \"/home/tom/Desktop/CSE 316 HW#2/todo_hw2/src/components/list_screen/ListScreen.js\";\nimport React, { Component } from 'react';\nimport ListHeading from './ListHeading';\nimport ListItemsTable from './ListItemsTable';\nimport ListTrash from './ListTrash';\nimport PropTypes from 'prop-types';\nimport { throwStatement } from '@babel/types';\nexport class ListScreen extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      show: 'modal',\n      originalName: null\n    };\n  }\n\n  getListName() {\n    if (this.props.todoList) {\n      let name = this.props.todoList.name;\n      return this.props.todoList.name;\n    } else return \"\";\n  }\n\n  getListOwner() {\n    if (this.props.todoList) {\n      let owner = this.props.todoList.owner;\n      return this.props.todoList.owner;\n    }\n  }\n\n  openModal(event) {\n    this.setState({\n      show: event.target.value\n    });\n  }\n\n  invisDialog(event) {\n    this.setState({\n      show: \"modal\"\n    });\n  }\n\n  render() {\n    const isVisible = this.state.show ? 'modal' : 'modal is_visible';\n    return React.createElement(\"div\", {\n      id: \"todo_list\",\n      onKeyDown: document.addEventListener(\"keydown\", this.props.printEvent.bind(this)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(ListHeading, {\n      goHome: this.props.goHome.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(ListTrash, {\n      openModal: this.openModal.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"list_details_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"list_details_name_container\",\n      className: \"text_toolbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      id: \"list_name_prompt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Name:\"), React.createElement(\"input\", {\n      value: this.getListName(),\n      type: \"text\",\n      id: \"list_name_textfield\",\n      onChange: this.props.setName.bind(this),\n      onClick: window.addEventListener(\"click\", this.props.changeName.bind(this)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"list_details_owner_container\",\n      className: \"text_toolbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      id: \"list_owner_prompt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Owner:\"), React.createElement(\"input\", {\n      id: \"owner_input\",\n      value: this.getListOwner(),\n      type: \"text\",\n      id: \"list_owner_textfield\",\n      onChange: this.props.setOwner.bind(this),\n      onFocus: window.addEventListener(\"click\", this.props.changeOwner.bind(this)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }))), React.createElement(ListItemsTable, {\n      todoList: this.props.todoList,\n      moveItemUp: this.props.moveItemUp,\n      moveItemDown: this.props.moveItemDown,\n      deleteItem: this.props.deleteItem,\n      goItemScreen: this.props.goItemScreen,\n      goEditScreen: this.props.goEditScreen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: isVisible,\n      id: \"modal_yes_no_dialog\",\n      \"data-animation\": \"slideInOutLeft\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal_dialog\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"dialog_header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Delete List?\"), React.createElement(\"section\", {\n      className: \"dialog_content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Are you sure you want to delete this list?\"))), React.createElement(\"button\", {\n      id: \"dialog_yes_button\",\n      onClick: this.props.deleteList.bind(this, this.props.todoList.key),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Yes\"), React.createElement(\"button\", {\n      id: \"dialog_no_button\",\n      onClick: this.invisDialog.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"No\"), React.createElement(\"footer\", {\n      className: \"dialog_footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"The list will not be retreivable.\"))));\n  }\n\n}\nexport default ListScreen;","map":{"version":3,"sources":["/home/tom/Desktop/CSE 316 HW#2/todo_hw2/src/components/list_screen/ListScreen.js"],"names":["React","Component","ListHeading","ListItemsTable","ListTrash","PropTypes","throwStatement","ListScreen","state","show","originalName","getListName","props","todoList","name","getListOwner","owner","openModal","event","setState","target","value","invisDialog","render","isVisible","document","addEventListener","printEvent","bind","goHome","setName","window","changeName","setOwner","changeOwner","moveItemUp","moveItemDown","deleteItem","goItemScreen","goEditScreen","deleteList","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport ListHeading from './ListHeading'\nimport ListItemsTable from './ListItemsTable'\nimport ListTrash from './ListTrash'\nimport PropTypes from 'prop-types';\nimport { throwStatement } from '@babel/types';\n\nexport class ListScreen extends Component {\n    state={\n        show: 'modal',\n        originalName: null\n    }\n    getListName() {\n        if (this.props.todoList) {\n            let name = this.props.todoList.name;\n            return this.props.todoList.name;\n        }\n        else\n            return \"\";\n    }\n    getListOwner() {\n        if (this.props.todoList) {\n            let owner = this.props.todoList.owner;\n            return this.props.todoList.owner;\n        }\n    }\n    openModal(event){\n        this.setState({\n            show: event.target.value\n        })\n    }\n\n    invisDialog(event){\n        this.setState({\n            show: \"modal\"\n        })\n    }\n    \n    render() {\n        const isVisible = this.state.show ? 'modal' : 'modal is_visible';\n        return (\n            <div id=\"todo_list\"\n            onKeyDown={document.addEventListener(\"keydown\", this.props.printEvent.bind(this))}>\n                <ListHeading goHome={this.props.goHome.bind(this)} />\n                <ListTrash openModal={this.openModal.bind(this)}/>\n                <div id=\"list_details_container\">\n                    <div id=\"list_details_name_container\" className=\"text_toolbar\">\n                        <span id=\"list_name_prompt\">Name:</span>\n                        <input\n                            value={this.getListName()} \n                            type=\"text\" \n                            id=\"list_name_textfield\"\n                            onChange={this.props.setName.bind(this)}\n                            onClick={window.addEventListener(\"click\",this.props.changeName.bind(this))}/>\n                    </div>\n                    <div id=\"list_details_owner_container\" className=\"text_toolbar\">\n                        <span id=\"list_owner_prompt\">Owner:</span>\n                        <input id = \"owner_input\"\n                            value={this.getListOwner()}\n                            type=\"text\" \n                            id=\"list_owner_textfield\"\n                            onChange={this.props.setOwner.bind(this)}\n                            onFocus={window.addEventListener(\"click\",this.props.changeOwner.bind(this))}/>\n                    </div>\n                </div>\n                <ListItemsTable todoList={this.props.todoList}\n                                moveItemUp={this.props.moveItemUp}\n                                moveItemDown={this.props.moveItemDown} \n                                deleteItem={this.props.deleteItem}\n                                goItemScreen={this.props.goItemScreen}\n                                goEditScreen={this.props.goEditScreen}\n                                />\n                <div className={isVisible} id=\"modal_yes_no_dialog\" data-animation=\"slideInOutLeft\">\n                    <div className=\"modal_dialog\">  \n                        <header className=\"dialog_header\">\n                            Delete List?\n                        </header>\n                        <section className=\"dialog_content\">\n                            <p><strong>Are you sure you want to delete this list?</strong></p>\n                        </section>\n                            <button id=\"dialog_yes_button\"\n                            onClick={this.props.deleteList.bind(this, this.props.todoList.key)}>Yes</button>\n                            <button id=\"dialog_no_button\"\n                            onClick={this.invisDialog.bind(this)}>No</button>\n                        <footer className=\"dialog_footer\">\n                            The list will not be retreivable.\n                        </footer>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListScreen\n"]},"metadata":{},"sourceType":"module"}