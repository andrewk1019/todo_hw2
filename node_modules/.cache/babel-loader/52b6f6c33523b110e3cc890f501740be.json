{"ast":null,"code":"import jSTPS_Transaction from '../jtps/jSTPS_Transaction.js';\n/**\n * AddToNum_Transaction.java\n * \n * This class is a transaction that can be executed and undone. It\n * can be stored in the jTPS transaction stack and must be constructed\n * with all the data necessary to perform both do and undo.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 2.0\n */\n\nexport class Edit_Transaction extends jSTPS_Transaction {\n  // THIS IS THE OBJECT IT WILL MANIPULATE\n\n  /**\n   * Constructor for this transaction, it initializes this\n   * object with all the data needed to both do and undo\n   * the transaction.\n   * \n   */\n  constructor(desc, assigned, due_date, completed, list) {\n    super(); // KEEP THESE FOR LATER\n\n    this.desc = desc;\n    this.assigned_to = assigned;\n    this.due_date = due_date;\n    this.completed = completed;\n    this.list = list;\n    this.item = null;\n  }\n  /**\n   * This transaction simply adds the value to the num.\n   */\n\n\n  doTransaction() {\n    this.list.items[this.list.items.length] = {\n      \"key\": this.list.items.length,\n      \"description\": this.desc,\n      \"assigned_to\": this.assigned_to,\n      \"due_date\": this.due_date,\n      \"completed\": this.completed\n    };\n    this.item = this.list.items[this.list.items.length - 1];\n  }\n\n  updateList() {\n    return this.list;\n  }\n  /**\n   * As the reverse of do, this method substracts from num.\n   */\n\n\n  undoTransaction() {\n    this.list.items.pop();\n    return this.list;\n  }\n\n  redoTransaction() {\n    this.list.items.push(this.item);\n    return this.list;\n  }\n  /**\n   * Provides a textual summary of this transaction.\n   * \n   * @return A string storing a textual summary of this object.\n   */\n\n\n  toString() {\n    return \"Edit \" + this.initItem;\n  }\n\n}\nexport default Edit_Transaction;","map":{"version":3,"sources":["/home/tom/Desktop/CSE 316 HW#2/todo_hw2/src/jTPS-master/test/demo/Add_Transaction.js"],"names":["jSTPS_Transaction","Edit_Transaction","constructor","desc","assigned","due_date","completed","list","assigned_to","item","doTransaction","items","length","updateList","undoTransaction","pop","redoTransaction","push","toString","initItem"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,8BAA9B;AACA;;;;;;;;;;;AAUA,OAAO,MAAMC,gBAAN,SAA+BD,iBAA/B,CAAgD;AACnD;;AAEA;;;;;;AAMAE,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,IAAtC,EAA4C;AACnD,YADmD,CAEnD;;AACA,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKK,WAAL,GAAmBJ,QAAnB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKE,IAAL,GAAY,IAAZ;AACH;AAED;;;;;AAGAC,EAAAA,aAAa,GAAG;AACZ,SAAKH,IAAL,CAAUI,KAAV,CAAgB,KAAKJ,IAAL,CAAUI,KAAV,CAAgBC,MAAhC,IAA0C;AAAC,aAC3C,KAAKL,IAAL,CAAUI,KAAV,CAAgBC,MAD0B;AAClB,qBAAe,KAAKT,IADF;AACQ,qBAAe,KAAKK,WAD5B;AAExC,kBAAY,KAAKH,QAFuB;AAEb,mBAAa,KAAKC;AAFL,KAA1C;AAGA,SAAKG,IAAL,GAAY,KAAKF,IAAL,CAAUI,KAAV,CAAgB,KAAKJ,IAAL,CAAUI,KAAV,CAAgBC,MAAhB,GAAyB,CAAzC,CAAZ;AACH;;AAEDC,EAAAA,UAAU,GAAE;AACR,WAAO,KAAKN,IAAZ;AACH;AACD;;;;;AAGAO,EAAAA,eAAe,GAAG;AACd,SAAKP,IAAL,CAAUI,KAAV,CAAgBI,GAAhB;AACA,WAAO,KAAKR,IAAZ;AACH;;AAEDS,EAAAA,eAAe,GAAG;AACd,SAAKT,IAAL,CAAUI,KAAV,CAAgBM,IAAhB,CAAqB,KAAKR,IAA1B;AACA,WAAO,KAAKF,IAAZ;AACH;AAED;;;;;;;AAKAW,EAAAA,QAAQ,GAAG;AACP,WAAO,UAAU,KAAKC,QAAtB;AACH;;AArDkD;AAuDvD,eAAelB,gBAAf","sourcesContent":["import jSTPS_Transaction from '../jtps/jSTPS_Transaction.js'\n/**\n * AddToNum_Transaction.java\n * \n * This class is a transaction that can be executed and undone. It\n * can be stored in the jTPS transaction stack and must be constructed\n * with all the data necessary to perform both do and undo.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 2.0\n */\nexport class Edit_Transaction extends jSTPS_Transaction{\n    // THIS IS THE OBJECT IT WILL MANIPULATE\n\n    /**\n     * Constructor for this transaction, it initializes this\n     * object with all the data needed to both do and undo\n     * the transaction.\n     * \n     */\n    constructor(desc, assigned, due_date, completed, list) {\n        super();\n        // KEEP THESE FOR LATER\n        this.desc = desc;\n        this.assigned_to = assigned;\n        this.due_date = due_date;\n        this.completed = completed;\n        this.list = list;\n        this.item = null;\n    }\n\n    /**\n     * This transaction simply adds the value to the num.\n     */\n    doTransaction() {\n        this.list.items[this.list.items.length] = {\"key\":\n        this.list.items.length, \"description\": this.desc, \"assigned_to\": this.assigned_to\n        , \"due_date\": this.due_date, \"completed\": this.completed}\n        this.item = this.list.items[this.list.items.length - 1];\n    }\n\n    updateList(){\n        return this.list;\n    }\n    /**\n     * As the reverse of do, this method substracts from num.\n     */\n    undoTransaction() {\n        this.list.items.pop();\n        return this.list;\n    }\n\n    redoTransaction() {\n        this.list.items.push(this.item);\n        return this.list;\n    }\n\n    /**\n     * Provides a textual summary of this transaction.\n     * \n     * @return A string storing a textual summary of this object.\n     */\n    toString() {\n        return \"Edit \" + this.initItem;\n    }\n}\nexport default Edit_Transaction;"]},"metadata":{},"sourceType":"module"}