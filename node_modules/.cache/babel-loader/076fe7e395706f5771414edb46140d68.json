{"ast":null,"code":"import jSTPS_Transaction from '../jtps/jSTPS_Transaction.js';\n/**\n * AddToNum_Transaction.java\n * \n * This class is a transaction that can be executed and undone. It\n * can be stored in the jTPS transaction stack and must be constructed\n * with all the data necessary to perform both do and undo.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 2.0\n */\n\nexport class Name_Transaction extends jSTPS_Transaction {\n  // THIS IS THE OBJECT IT WILL MANIPULATE\n\n  /**\n   * Constructor for this transaction, it initializes this\n   * object with all the data needed to both do and undo\n   * the transaction.\n   * \n   */\n  constructor(origName, newName, list) {\n    super();\n    this.origName = origName;\n    this.newName = newName;\n    this.list = list; // KEEP THESE FOR LATER\n  }\n  /**\n   * This transaction simply adds the value to the num.\n   */\n\n\n  doTransaction() {\n    this.list.name = this.newName;\n  }\n\n  updateList() {\n    return this.list;\n  }\n  /**\n   * As the reverse of do, this method substracts from num.\n   */\n\n\n  undoTransaction() {\n    this.list.name = this.origName;\n  }\n\n  redoTransaction() {}\n  /**\n   * Provides a textual summary of this transaction.\n   * \n   * @return A string storing a textual summary of this object.\n   */\n\n\n  toString() {\n    return \"Move \" + this.amountToAdd;\n  }\n\n}\nexport default Name_Transaction;","map":{"version":3,"sources":["/home/tom/Desktop/CSE 316 HW#2/todo_hw2/src/jTPS-master/test/demo/Name_Transaction.js"],"names":["jSTPS_Transaction","Name_Transaction","constructor","origName","newName","list","doTransaction","name","updateList","undoTransaction","redoTransaction","toString","amountToAdd"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,8BAA9B;AACA;;;;;;;;;;;AAUA,OAAO,MAAMC,gBAAN,SAA+BD,iBAA/B,CAAiD;AACpD;;AAEA;;;;;;AAMAE,EAAAA,WAAW,CAACC,QAAD,EAAWC,OAAX,EAAoBC,IAApB,EAA0B;AACjC;AACA,SAAKF,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,IAAL,GAAYA,IAAZ,CAJiC,CAKjC;AACH;AAED;;;;;AAGAC,EAAAA,aAAa,GAAG;AACZ,SAAKD,IAAL,CAAUE,IAAV,GAAiB,KAAKH,OAAtB;AACH;;AAEDI,EAAAA,UAAU,GAAE;AACR,WAAO,KAAKH,IAAZ;AACH;AACD;;;;;AAGAI,EAAAA,eAAe,GAAG;AACd,SAAKJ,IAAL,CAAUE,IAAV,GAAiB,KAAKJ,QAAtB;AACH;;AAEDO,EAAAA,eAAe,GAAG,CACrB;AACG;;;;;;;AAKAC,EAAAA,QAAQ,GAAG;AACP,WAAO,UAAU,KAAKC,WAAtB;AACH;;AA3CmD;AA6CxD,eAAeX,gBAAf","sourcesContent":["import jSTPS_Transaction from '../jtps/jSTPS_Transaction.js'\n/**\n * AddToNum_Transaction.java\n * \n * This class is a transaction that can be executed and undone. It\n * can be stored in the jTPS transaction stack and must be constructed\n * with all the data necessary to perform both do and undo.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 2.0\n */\nexport class Name_Transaction extends jSTPS_Transaction {\n    // THIS IS THE OBJECT IT WILL MANIPULATE\n\n    /**\n     * Constructor for this transaction, it initializes this\n     * object with all the data needed to both do and undo\n     * the transaction.\n     * \n     */\n    constructor(origName, newName, list) {\n        super();\n        this.origName = origName;\n        this.newName = newName;\n        this.list = list;\n        // KEEP THESE FOR LATER\n    }\n\n    /**\n     * This transaction simply adds the value to the num.\n     */\n    doTransaction() {\n        this.list.name = this.newName;\n    }\n\n    updateList(){\n        return this.list;\n    }\n    /**\n     * As the reverse of do, this method substracts from num.\n     */\n    undoTransaction() {\n        this.list.name = this.origName;\n    }\n\n    redoTransaction() {\n}\n    /**\n     * Provides a textual summary of this transaction.\n     * \n     * @return A string storing a textual summary of this object.\n     */\n    toString() {\n        return \"Move \" + this.amountToAdd;\n    }\n}\nexport default Name_Transaction;"]},"metadata":{},"sourceType":"module"}