{"ast":null,"code":"import jSTPS_Transaction from '../jtps/jSTPS_Transaction.js';\n/**\n * AddToNum_Transaction.java\n * \n * This class is a transaction that can be executed and undone. It\n * can be stored in the jTPS transaction stack and must be constructed\n * with all the data necessary to perform both do and undo.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 2.0\n */\n\nexport class MoveDown_Transaction extends jSTPS_Transaction {\n  // THIS IS THE OBJECT IT WILL MANIPULATE\n\n  /**\n   * Constructor for this transaction, it initializes this\n   * object with all the data needed to both do and undo\n   * the transaction.\n   * \n   */\n  constructor(currentList, initItem, secondItem) {\n    // KEEP THESE FOR LATER\n    super();\n    this.item = initItem;\n    this.second = secondItem;\n    this.key = initItem.key;\n    this.list = currentList;\n    this.state = true;\n  }\n  /**\n   * This transaction simply adds the value to the num.\n   */\n\n\n  doTransaction() {\n    var key1 = this.key + 1;\n    var item = this.list.items[this.key];\n    var item1 = this.list.items[key1];\n    this.list.items[this.key] = item1;\n    this.list.items[key1] = item;\n    this.list.items[this.key].key = this.key;\n    this.list.items[key1].key = key1;\n  }\n\n  updateList() {\n    return this.list;\n  }\n  /**\n   * As the reverse of do, this method substracts from num.\n   */\n\n\n  undoTransaction() {\n    var key1 = this.key + 1;\n    var item = this.list.items[this.key];\n    var item1 = this.list.items[key1];\n    this.list.items[this.key] = item1;\n    this.list.items[key1] = item;\n    this.list.items[this.key].key = this.key;\n    this.list.items[key1].key = key1;\n    return this.list;\n  }\n\n  redoTransaction() {\n    var key1 = this.key + 1;\n    var item = this.list.items[this.key];\n    var item1 = this.list.items[key1];\n    this.list.items[this.key] = item1;\n    this.list.items[key1] = item;\n    this.list.items[this.key].key = this.key;\n    this.list.items[key1].key = key1;\n    return this.list;\n  }\n  /**\n   * Provides a textual summary of this transaction.\n   * \n   * @return A string storing a textual summary of this object.\n   */\n\n\n  toString() {\n    return \"Move \" + this.initItem;\n  }\n\n}\nexport default MoveDown_Transaction;","map":{"version":3,"sources":["/home/tom/Desktop/CSE 316 HW#2/todo_hw2/src/jTPS-master/test/demo/MoveDown_Transaction.js"],"names":["jSTPS_Transaction","MoveDown_Transaction","constructor","currentList","initItem","secondItem","item","second","key","list","state","doTransaction","key1","items","item1","updateList","undoTransaction","redoTransaction","toString"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,8BAA9B;AACA;;;;;;;;;;;AAUA,OAAO,MAAMC,oBAAN,SAAmCD,iBAAnC,CAAqD;AACxD;;AAEA;;;;;;AAMAE,EAAAA,WAAW,CAACC,WAAD,EAAcC,QAAd,EAAwBC,UAAxB,EAAoC;AAC3C;AACA;AACA,SAAKC,IAAL,GAAYF,QAAZ;AACA,SAAKG,MAAL,GAAcF,UAAd;AACA,SAAKG,GAAL,GAAWJ,QAAQ,CAACI,GAApB;AACA,SAAKC,IAAL,GAAYN,WAAZ;AACA,SAAKO,KAAL,GAAa,IAAb;AACH;AAED;;;;;AAGAC,EAAAA,aAAa,GAAG;AACZ,QAAIC,IAAI,GAAG,KAAKJ,GAAL,GAAW,CAAtB;AACA,QAAIF,IAAI,GAAG,KAAKG,IAAL,CAAUI,KAAV,CAAgB,KAAKL,GAArB,CAAX;AACA,QAAIM,KAAK,GAAG,KAAKL,IAAL,CAAUI,KAAV,CAAgBD,IAAhB,CAAZ;AACA,SAAKH,IAAL,CAAUI,KAAV,CAAgB,KAAKL,GAArB,IAA4BM,KAA5B;AACA,SAAKL,IAAL,CAAUI,KAAV,CAAgBD,IAAhB,IAAwBN,IAAxB;AACA,SAAKG,IAAL,CAAUI,KAAV,CAAgB,KAAKL,GAArB,EAA0BA,GAA1B,GAAgC,KAAKA,GAArC;AACA,SAAKC,IAAL,CAAUI,KAAV,CAAgBD,IAAhB,EAAsBJ,GAAtB,GAA4BI,IAA5B;AACH;;AAEDG,EAAAA,UAAU,GAAE;AACR,WAAO,KAAKN,IAAZ;AACH;AAED;;;;;AAGAO,EAAAA,eAAe,GAAG;AACd,QAAIJ,IAAI,GAAG,KAAKJ,GAAL,GAAW,CAAtB;AACA,QAAIF,IAAI,GAAG,KAAKG,IAAL,CAAUI,KAAV,CAAgB,KAAKL,GAArB,CAAX;AACA,QAAIM,KAAK,GAAG,KAAKL,IAAL,CAAUI,KAAV,CAAgBD,IAAhB,CAAZ;AACA,SAAKH,IAAL,CAAUI,KAAV,CAAgB,KAAKL,GAArB,IAA4BM,KAA5B;AACA,SAAKL,IAAL,CAAUI,KAAV,CAAgBD,IAAhB,IAAwBN,IAAxB;AACA,SAAKG,IAAL,CAAUI,KAAV,CAAgB,KAAKL,GAArB,EAA0BA,GAA1B,GAAgC,KAAKA,GAArC;AACA,SAAKC,IAAL,CAAUI,KAAV,CAAgBD,IAAhB,EAAsBJ,GAAtB,GAA4BI,IAA5B;AACA,WAAO,KAAKH,IAAZ;AACH;;AAEDQ,EAAAA,eAAe,GAAG;AACd,QAAIL,IAAI,GAAG,KAAKJ,GAAL,GAAW,CAAtB;AACA,QAAIF,IAAI,GAAG,KAAKG,IAAL,CAAUI,KAAV,CAAgB,KAAKL,GAArB,CAAX;AACA,QAAIM,KAAK,GAAG,KAAKL,IAAL,CAAUI,KAAV,CAAgBD,IAAhB,CAAZ;AACA,SAAKH,IAAL,CAAUI,KAAV,CAAgB,KAAKL,GAArB,IAA4BM,KAA5B;AACA,SAAKL,IAAL,CAAUI,KAAV,CAAgBD,IAAhB,IAAwBN,IAAxB;AACA,SAAKG,IAAL,CAAUI,KAAV,CAAgB,KAAKL,GAArB,EAA0BA,GAA1B,GAAgC,KAAKA,GAArC;AACA,SAAKC,IAAL,CAAUI,KAAV,CAAgBD,IAAhB,EAAsBJ,GAAtB,GAA4BI,IAA5B;AACA,WAAO,KAAKH,IAAZ;AACH;AAED;;;;;;;AAKAS,EAAAA,QAAQ,GAAG;AACP,WAAO,UAAU,KAAKd,QAAtB;AACH;;AApEuD;AAsE5D,eAAeH,oBAAf","sourcesContent":["import jSTPS_Transaction from '../jtps/jSTPS_Transaction.js'\n/**\n * AddToNum_Transaction.java\n * \n * This class is a transaction that can be executed and undone. It\n * can be stored in the jTPS transaction stack and must be constructed\n * with all the data necessary to perform both do and undo.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 2.0\n */\nexport class MoveDown_Transaction extends jSTPS_Transaction {\n    // THIS IS THE OBJECT IT WILL MANIPULATE\n\n    /**\n     * Constructor for this transaction, it initializes this\n     * object with all the data needed to both do and undo\n     * the transaction.\n     * \n     */\n    constructor(currentList, initItem, secondItem) {\n        // KEEP THESE FOR LATER\n        super();\n        this.item = initItem;\n        this.second = secondItem;\n        this.key = initItem.key;\n        this.list = currentList;\n        this.state = true;\n    }\n\n    /**\n     * This transaction simply adds the value to the num.\n     */\n    doTransaction() {\n        var key1 = this.key + 1;\n        var item = this.list.items[this.key];\n        var item1 = this.list.items[key1];\n        this.list.items[this.key] = item1;\n        this.list.items[key1] = item;\n        this.list.items[this.key].key = this.key;\n        this.list.items[key1].key = key1;\n    }\n\n    updateList(){\n        return this.list;\n    }\n\n    /**\n     * As the reverse of do, this method substracts from num.\n     */\n    undoTransaction() {\n        var key1 = this.key + 1;\n        var item = this.list.items[this.key];\n        var item1 = this.list.items[key1];\n        this.list.items[this.key] = item1;\n        this.list.items[key1] = item;\n        this.list.items[this.key].key = this.key;\n        this.list.items[key1].key = key1;\n        return this.list;\n    }\n\n    redoTransaction() {\n        var key1 = this.key + 1;\n        var item = this.list.items[this.key];\n        var item1 = this.list.items[key1];\n        this.list.items[this.key] = item1;\n        this.list.items[key1] = item;\n        this.list.items[this.key].key = this.key;\n        this.list.items[key1].key = key1;\n        return this.list;\n    }\n\n    /**\n     * Provides a textual summary of this transaction.\n     * \n     * @return A string storing a textual summary of this object.\n     */\n    toString() {\n        return \"Move \" + this.initItem;\n    }\n}\nexport default MoveDown_Transaction;"]},"metadata":{},"sourceType":"module"}