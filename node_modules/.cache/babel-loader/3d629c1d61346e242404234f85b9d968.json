{"ast":null,"code":"/**\n * AddToNum_Transaction.java\n * \n * This class is a transaction that can be executed and undone. It\n * can be stored in the jTPS transaction stack and must be constructed\n * with all the data necessary to perform both do and undo.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 2.0\n */\nexport class Delete_Transaction {\n  // THIS IS THE OBJECT IT WILL MANIPULATE\n\n  /**\n   * Constructor for this transaction, it initializes this\n   * object with all the data needed to both do and undo\n   * the transaction.\n   * \n   */\n  constructor(currentList, key, initItem) {\n    // KEEP THESE FOR LATER\n    this.item = initItem;\n    this.key = key;\n    this.list = currentList;\n    this.state = true;\n  }\n  /**\n   * This transaction simply adds the value to the num.\n   */\n\n\n  doTransaction() {\n    this.list.items = this.list.items.filter(item => item.key !== this.key);\n\n    for (var i = this.key; i < this.list.items.length; i++) {\n      this.list.items[i].key--;\n    }\n  }\n\n  updateList() {\n    return this.list;\n  }\n  /**\n   * As the reverse of do, this method substracts from num.\n   */\n\n\n  undoTransaction() {\n    this.list.items.splice(this.item.key, 0, this.item);\n\n    for (var i = this.key + 1; i < this.list.items.length; i++) {\n      this.list.items[i].key++;\n    }\n\n    return this.list;\n  }\n\n  redoTransaction() {\n    this.list.items = this.list.items.filter(item => item.key !== this.key);\n\n    for (var i = this.key; i < this.list.items.length; i++) {\n      this.list.items[i].key--;\n    }\n\n    return this.list;\n  }\n  /**\n   * Provides a textual summary of this transaction.\n   * \n   * @return A string storing a textual summary of this object.\n   */\n\n\n  toString() {\n    return \"Delete \" + this.initItem;\n  }\n\n}\nexport default Delete_Transaction;","map":{"version":3,"sources":["/home/tom/Desktop/CSE 316 HW#2/todo_hw2/src/jTPS-master/test/demo/Delete_Transaction.js"],"names":["Delete_Transaction","constructor","currentList","key","initItem","item","list","state","doTransaction","items","filter","i","length","updateList","undoTransaction","splice","redoTransaction","toString"],"mappings":"AAAA;;;;;;;;;;AAUA,OAAO,MAAMA,kBAAN,CAAyB;AAC5B;;AAEA;;;;;;AAMAC,EAAAA,WAAW,CAACC,WAAD,EAAcC,GAAd,EAAkBC,QAAlB,EAA4B;AACnC;AACA,SAAKC,IAAL,GAAYD,QAAZ;AACA,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKG,IAAL,GAAYJ,WAAZ;AACA,SAAKK,KAAL,GAAa,IAAb;AACH;AAED;;;;;AAGAC,EAAAA,aAAa,GAAG;AACZ,SAAKF,IAAL,CAAUG,KAAV,GAAkB,KAAKH,IAAL,CAAUG,KAAV,CAAgBC,MAAhB,CAAuBL,IAAI,IAAIA,IAAI,CAACF,GAAL,KAAa,KAAKA,GAAjD,CAAlB;;AACA,SAAI,IAAIQ,CAAC,GAAG,KAAKR,GAAjB,EAAsBQ,CAAC,GAAG,KAAKL,IAAL,CAAUG,KAAV,CAAgBG,MAA1C,EAAkDD,CAAC,EAAnD,EAAsD;AAClD,WAAKL,IAAL,CAAUG,KAAV,CAAgBE,CAAhB,EAAmBR,GAAnB;AACD;AACN;;AAEDU,EAAAA,UAAU,GAAE;AACR,WAAO,KAAKP,IAAZ;AACH;AAED;;;;;AAGAQ,EAAAA,eAAe,GAAG;AACd,SAAKR,IAAL,CAAUG,KAAV,CAAgBM,MAAhB,CAAuB,KAAKV,IAAL,CAAUF,GAAjC,EAAsC,CAAtC,EAAyC,KAAKE,IAA9C;;AACA,SAAI,IAAIM,CAAC,GAAG,KAAKR,GAAL,GAAS,CAArB,EAAwBQ,CAAC,GAAG,KAAKL,IAAL,CAAUG,KAAV,CAAgBG,MAA5C,EAAoDD,CAAC,EAArD,EAAwD;AACpD,WAAKL,IAAL,CAAUG,KAAV,CAAgBE,CAAhB,EAAmBR,GAAnB;AACH;;AACD,WAAO,KAAKG,IAAZ;AACH;;AAEDU,EAAAA,eAAe,GAAG;AACd,SAAKV,IAAL,CAAUG,KAAV,GAAkB,KAAKH,IAAL,CAAUG,KAAV,CAAgBC,MAAhB,CAAuBL,IAAI,IAAIA,IAAI,CAACF,GAAL,KAAa,KAAKA,GAAjD,CAAlB;;AACA,SAAI,IAAIQ,CAAC,GAAG,KAAKR,GAAjB,EAAsBQ,CAAC,GAAG,KAAKL,IAAL,CAAUG,KAAV,CAAgBG,MAA1C,EAAkDD,CAAC,EAAnD,EAAsD;AAClD,WAAKL,IAAL,CAAUG,KAAV,CAAgBE,CAAhB,EAAmBR,GAAnB;AACD;;AACH,WAAO,KAAKG,IAAZ;AACH;AAED;;;;;;;AAKAW,EAAAA,QAAQ,GAAG;AACP,WAAO,YAAY,KAAKb,QAAxB;AACH;;AAzD2B;AA2DhC,eAAeJ,kBAAf","sourcesContent":["/**\n * AddToNum_Transaction.java\n * \n * This class is a transaction that can be executed and undone. It\n * can be stored in the jTPS transaction stack and must be constructed\n * with all the data necessary to perform both do and undo.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 2.0\n */\nexport class Delete_Transaction {\n    // THIS IS THE OBJECT IT WILL MANIPULATE\n\n    /**\n     * Constructor for this transaction, it initializes this\n     * object with all the data needed to both do and undo\n     * the transaction.\n     * \n     */\n    constructor(currentList, key,initItem) {\n        // KEEP THESE FOR LATER\n        this.item = initItem;\n        this.key = key;\n        this.list = currentList;\n        this.state = true;\n    }\n\n    /**\n     * This transaction simply adds the value to the num.\n     */\n    doTransaction() {\n        this.list.items = this.list.items.filter(item => item.key !== this.key)\n        for(var i = this.key; i < this.list.items.length; i++){\n            this.list.items[i].key--;\n          }\n    }\n\n    updateList(){\n        return this.list;\n    }\n\n    /**\n     * As the reverse of do, this method substracts from num.\n     */\n    undoTransaction() {\n        this.list.items.splice(this.item.key, 0, this.item)\n        for(var i = this.key+1; i < this.list.items.length; i++){\n            this.list.items[i].key++;\n        }\n        return this.list;\n    }\n\n    redoTransaction() {\n        this.list.items = this.list.items.filter(item => item.key !== this.key)\n        for(var i = this.key; i < this.list.items.length; i++){\n            this.list.items[i].key--;\n          }\n        return this.list;\n    }\n\n    /**\n     * Provides a textual summary of this transaction.\n     * \n     * @return A string storing a textual summary of this object.\n     */\n    toString() {\n        return \"Delete \" + this.initItem;\n    }\n}\nexport default Delete_Transaction;"]},"metadata":{},"sourceType":"module"}